# -*- coding: utf-8 -*-
"""Работа с API и JSON в Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pz6bAg_NuLIIXE5OGEqNTVmd4hzLqK2Y

## Работа с API и JSON в Python: практическое руководство

Работа с API и JSON — важный навык аналитиков данных, который позволяет получать и обрабатывать актуальную информацию из внешних источников. В этой статье мы рассмотрим основные принципы работы с API и приведём практический пример для лучшего понимания темы.


## Теория: запросы к API и обработка JSON

- **API (Application Programming Interface)** — это интерфейс, который позволяет программам взаимодействовать друг с другом. Часто API предоставляет данные в формате JSON.
- Для работы с API в Python обычно используют библиотеку `requests`, которая позволяет отправлять HTTP-запросы (GET, POST и др.).
- Ответ от API часто приходит в формате JSON — это текстовый формат, который легко преобразуется в структуры Python (словарь, список) с помощью встроенной библиотеки `json`.
- Основные шаги:
  1. Отправить запрос к API с помощью `requests.get()` или `requests.post()`.
  2. Получить ответ и проверить статус (например, код 200 означает успешный запрос).
  3. Преобразовать JSON-ответ в объект Python через `response.json()` или `json.loads()`.
  4. Извлечь нужные данные из полученного словаря или списка для анализа.

## Практика: пример получения и анализа данных из открытого API

Возьмём публичный API JSON Placeholder, который возвращает фиктивные данные. Получим задачу (todo) по ID и проанализируем её.
"""

import requests

# URL API для получения задачи с id=1
url = "https://jsonplaceholder.typicode.com/todos/1"

# Отправляем GET-запрос
response = requests.get(url)

# Проверяем статус ответа
if response.status_code == 200:
    # Преобразуем JSON в словарь Python
    data = response.json()

    # Выводим полученные данные
    print("Полученные данные:", data)

    # Анализ: проверим, выполнена ли задача
    if data['completed']:
        print(f"Задача '{data['title']}' выполнена.")
    else:
        print(f"Задача '{data['title']}' ещё не выполнена.")
else:
    print("Ошибка при запросе к API:", response.status_code)

"""
### Что здесь происходит:
- Мы делаем GET-запрос к API.
- Получаем JSON-ответ и сразу преобразуем его в словарь Python.
- Извлекаем нужные поля (`title`, `completed`) и выводим информацию.
- По полю `completed` делаем простой анализ — выполнена задача или нет.

## Расширение: работа с вложенными JSON и сохранение данных

Если API возвращает сложные вложенные структуры, с ними тоже можно работать, обращаясь к вложенным ключам словарей и элементам списков.

Для сохранения данных в файл JSON можно использовать:

```python
import json

with open('data.json', 'w') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)
```

---

## Работа с JSON: создание, сохранение и чтение данных

Теперь давайте более подробно рассмотрим работу с JSON-форматом, разберем такую задачу:

**Задача:** создать структуру данных в формате Python, преобразовать её в JSON-формат и сохранить в файл. Затем загрузить данные из файла обратно в Python-объект и получить доступ к отдельным элементам для дальнейшего анализа.

Такой процесс часто используется для хранения и обмена данными в аналитике."""

import json

user_data = {
    "name": "Alice",
    "age": 30,
    "city": "New York",
    "skills": ["Python", "Data Analysis", "Machine Learning"]
}

# Преобразование словаря в JSON-строку
json_str = json.dumps(user_data, indent=4)
print("JSON-строка:")
print(json_str)

# Запись JSON-строки в файл
with open('user_data.json', 'w') as file:
    json.dump(user_data, file, indent=4)

# Чтение JSON из файла и преобразование обратно в объект Python
with open('user_data.json', 'r') as file:
    data = json.load(file)

print("\nДанные, загруженные из JSON-файла:")
print(data)

# Доступ к отдельным элементам
print("\nИмя пользователя:", data['name'])
print("Навыки пользователя:", ", ".join(data['skills']))

"""
В этом примере показано, как создавать JSON-данные из словаря Python, сохранять их в файл и затем читать обратно для дальнейшей работы. Это фундаментальные операции при работе с JSON, которые часто используются аналитиками для хранения и обмена данными.

---

## Пример: Получение температуры в нескольких городах и поиск самого тёплого

Необходимо написать программу, которая:

- Получит текущую температуру в нескольких городах через OpenWeatherMap API.
- Определит и выведет город с самой высокой температурой.

---"""

import requests

API_KEY = "ваш_api_ключ"  # Зарегистрируйтесь на https://openweathermap.org/ и получите ключ
CITIES = ["Moscow", "Saint Petersburg", "Novosibirsk", "Yekaterinburg", "Kazan"]

def get_temperature(city):
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {"q": city, "appid": API_KEY, "units": "metric"}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data["main"]["temp"]
    else:
        print(f"Ошибка для города {city}: {response.status_code}")
        return None

def main():
    temps = {}
    for city in CITIES:
        temp = get_temperature(city)
        if temp is not None:
            temps[city] = temp

    if temps:
        warmest_city = max(temps, key=temps.get)
        print("Температуры в городах:")
        for city, temp in temps.items():
            print(f"{city}: {temp}°C")
        print(f"\nСамый тёплый город: {warmest_city} ({temps[warmest_city]}°C)")
    else:
        print("Данные не получены.")

if __name__ == "__main__":
    main()

"""---

### Разбор решения

- Функция `get_temperature` отправляет запрос к API и возвращает температуру в градусах Цельсия для указанного города.
- В `main` мы собираем температуры для всех городов в словарь `temps`.
- Затем находим город с максимальной температурой с помощью функции `max`.
- Выводим температуры и самый тёплый город.

---

## Заключение

Работа с API и JSON в Python — это фундаментальный навык, который включает в себя несколько этапов:

- **Отправка запросов через библиотеку requests** — позволяет взаимодействовать с внешними веб-сервисами, получать необходимые данные и управлять процессом обмена информацией.
- **Получение и преобразование JSON-ответов** — JSON является одним из самых популярных форматов передачи данных, и умение корректно распарсить и преобразовать эти данные в удобные для обработки структуры Python (например, словари и списки) крайне важно.
- **Извлечение и анализ данных** — после получения данных необходимо уметь эффективно извлекать нужную информацию, фильтровать, преобразовывать и анализировать её для дальнейшего использования.
- **Автоматизация сбора и обработки данных из внешних источников** — с помощью API и JSON можно создавать скрипты и приложения, которые автоматически собирают актуальные данные из интернета, корпоративных систем, социальных сетей и других сервисов, значительно экономя время и повышая точность анализа.

Освоение работы с API и JSON расширяет профессиональные возможности аналитика, позволяя ему работать с живыми, постоянно обновляющимися данными, интегрировать различные источники информации и создавать более глубокие, обоснованные и своевременные аналитические отчёты. Этот навык открывает двери к современным методам обработки данных и является важным шагом на пути к более продвинутому уровню аналитики и разработки.
"""